<!DOCTYPE html>
<html>
<head>
    <title>Tag Management</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Jun 22 2017 15:31:18 GMT-0600 (MDT) -->

    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Jun 22 2017 15:31:18 GMT-0600 (MDT)";
        var STORY    = "F69";
        var BUILDER  = "corkr03";
        var CHECKSUM = 11432697059;
    </script>

    <script type="text/javascript" src="/apps/2.1/sdk-debug.js"></script>
    <!-- our highcharts (needed so that we can add patterns)
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->


    <script type="text/javascript">
        Rally.onReady(function() {
            Ext.define("Rally.technicalservices.InfoLink",{extend:"Rally.ui.dialog.Dialog",alias:"widget.tsinfolink",informationHtml:null,title:"Build Information",defaults:{padding:5,margin:5},closable:!0,draggable:!0,autoShow:!0,width:350,informationalConfig:null,items:[{xtype:"container",itemId:"information"}],initComponent:function(){Ext.id(this);this.title="<span class='icon-help'> </span>"+this.title,this.callParent(arguments)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/var BUILDER  = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=Ext.create("Deft.Deferred"),c=this;return Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){if(text=a.responseText,CHECKSUM){var d=c._generateChecksum(text);if(CHECKSUM!==d)return void b.resolve(!1)}b.resolve(!0)}}),b.promise},_addToContainer:function(a){var b=Ext.apply({xtype:"container",height:200,overflowY:!0},this.informationalConfig);a.add(b)},afterRender:function(){var a=Rally.getApp();if(!Ext.isEmpty(this.informationalConfig)){var b=this.down("#information");this._addToContainer(b)}a.isExternal()?this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"... Running externally"}):this._checkChecksum(a).then({scope:this,success:function(a){a||this.addDocked({xtype:"container",cls:"build-info",dock:"bottom",padding:2,html:'<span class="icon-warning"> </span>Checksums do not match'})},failure:function(a){console.log("oops:",a)}}),this.callParent(arguments)},beforeRender:function(){if(this.callParent(arguments),this.informationHtml&&this.addDocked({xtype:"component",componentCls:"intro-panel",padding:2,html:this.informationHtml,doc:"top"}),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"This app was created by the CA AC Technical Services Team."}),APP_BUILD_DATE){var a=Ext.String.format("Built on: {0} <br/>Built by: {1}",APP_BUILD_DATE,BUILDER);STORY&&(a=a+"<br/>Source story: "+STORY),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:a})}}}),Ext.define("Rally.technicalservices.Logger",{constructor:function(a){Ext.apply(this,a)},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),window.console&&console.log.apply(console,c)}}),Ext.override(Rally.ui.grid.CheckboxModel,{_recordIsSelectable:function(a){return"tag"===a.get("_type")}}),Ext.define("CATS.tag-management.utils.menu.bulk.Archive",{alias:"widget.tagmanagementbulkarchive",extend:"Rally.ui.menu.bulk.MenuItem",mixins:{messageable:"Rally.Messageable"},config:{onBeforeAction:function(){},onActionComplete:function(){},text:"Archive...",handler:function(){this._archiveRecords(this.records,null)},predicate:function(a){return!0}},_archiveRecords:function(a){},onSuccess:function(a,b,c,d){var e=a.length+(1===a.length?" item has ":" items have ");a.length===this.records.length?(e+=" been archived",this.publish("bulkActionComplete",e)):(0===a.length&&(e="0 items have been archived"),this.publish("bulkActionError",e+", but "+b.length+" failed: "+d)),Ext.callback(this.onActionComplete,null,[a,b])}}),Ext.define("CATS.tag-management.utils.menu.bulk.Delete",{alias:"widget.tagmanagementbulkdelete",extend:"Rally.ui.menu.bulk.MenuItem",mixins:{messageable:"Rally.Messageable"},config:{onBeforeAction:function(){},onActionComplete:function(){},text:"Delete...",handler:function(){this._deleteRecords(this.records,null)},predicate:function(a){return!0}},_deleteRecords:function(a){},onSuccess:function(a,b,c,d){var e=a.length+(1===a.length?" item has ":" items have ");a.length===this.records.length?(e+=" been deleted",this.publish("bulkActionComplete",e)):(0===a.length&&(e="0 items have been deleted"),this.publish("bulkActionError",e+", but "+b.length+" failed: "+d)),Ext.callback(this.onActionComplete,null,[a,b])}}),Ext.define("CATS.tag-management.utils.TagMetrics",{logger:new Rally.technicalservices.Logger,tagHash:{},mixins:{observable:"Ext.util.Observable"},constructor:function(a){this.getExtendedTagModel(),this._initializeTagData(a.tags),this.mixins.observable.constructor.call(this,a)},_initializeTagData:function(a){this.logger.log("_initializeTagData"),tagHash=this.tagHash;for(var b=0;b<a.length;b++){var c=a[b].getData();c.count=0,tagHash[c.ObjectID]=c}this.tagHash=tagHash},addCurrentSnapshots:function(a){var b=this.tagHash;this.reset();for(var c=0;c<a.length;c++)for(var d=a[c].raw.Tags||[],e=0;e<d.length;e++)b[d[e]]||(b[d[e]]={count:0}),b[d[e]].count++;this.fireEvent("update",this),this.tagHash=b},addCurrentWsapiRecords:function(a){this.logger.log("addWsapiRecords",a.length),this.reset(),tagHash=this.tagHash;for(var b=0;b<a.length;b++){var c=a[b].get("Tags")&&a[b].get("Tags")._tagsNameArray;c.length>0&&_.each(c,function(a){var b=Rally.util.Ref.getOidFromRef(a._ref);tagHash[b].count++})}this.fireEvent("update",this),this.tagHash=tagHash},addHistoricalSnapshots:function(a){for(var b=this.tagHash,c=0;c<a.length;c++)for(var d=a[c].raw.Tags||[],e=Rally.util.DateTime.fromIsoString(a[c].raw._ValidFrom),f=0;f<d.length;f++)b[d[f]]||(b[d[f]]={count:1}),(!b[d[f]].lastUsed||b[d[f]].lastUsed<e)&&(b[d[f]].lastUsed=e);this.fireEvent("update",this),this.tagHash=b},reset:function(){Ext.Object.each(this.tagHash,function(a,b){b.count=0,b.lastUsed=null})},getData:function(a,b,c,d,e){this.logger.log("getData",a,b,c,d,e);var f=Ext.Object.getValues(this.tagHash);return(b||c||!d||!e)&&(f=Ext.Array.filter(f,function(a){return b&&a.count>=b?!1:!d&&a.Archived?!1:e||0!==a.count?!0:!1})),a&&(f=this._findDups(f)),{data:f,model:this.tagModel,pageSize:f.length}},_findDups:function(a){for(var b=[],c=0;c<a.length;c++)for(var d=c+1;d<a.length;d++)a[c].Name.toLowerCase().trim()==a[d].Name.toLowerCase().trim()&&(b.push(a[c].ObjectID),b.push(a[d].ObjectID));return b=_.uniq(b),_.map(b,function(a){return this.tagHash[a]},this)},getExtendedTagModel:function(){return Rally.data.ModelFactory.getModel({type:"tag"}).then({success:function(a){var b=[{name:"count"},{name:"lastUsed"}];this.tagModel=Ext.define("TagMetricsModel",{extend:a,fields:b}),this.fireEvent("ready",this)},scope:this})}}),Ext.define("CATS.tag-management.utils.menu.TagReplace",{extend:"Rally.ui.menu.item.RecordMenuItem",alias:"widget.tagreplacemenuitem",clickHideDelay:1,config:{record:void 0,handler:function(){console.log("click example record menu item")},predicate:function(a){return console.log("predicate"),!0},text:"Replace With..."},constructor:function(a){this.initConfig(a),this.callParent(arguments)}}),Ext.define("tag-management",{extend:"Rally.app.App",componentCls:"app",logger:new Rally.technicalservices.Logger,defaults:{margin:10},items:[{xtype:"container",itemId:"message_box",tpl:"Hello, <tpl>{_refObjectName}</tpl>"},{xtype:"container",itemId:"display_box"}],integrationHeaders:{name:"tag-management"},config:{defaultSettings:{useLookback:!1}},launch:function(){this.setLoading("Loading Tag Data..."),this._fetchTags().then({success:this._buildTagMetrics,failure:this._showErrorNotification,scope:this}).always(function(){this.setLoading(!1)},this)},_showErrorNotification:function(a){Rally.ui.notify.Notifier.showError({message:a})},_updateView:function(a){if(this.logger.log("_updateView",a),this.tagMetrics){this.down("#gridBox").removeAll();var b=this.tagMetrics.getData(this.getShowDups(),this.getUsageLessThan(),this.getMonthsSinceUsed(),this.getShowArchived(),this.getShowUnused()),c="No Tags found that meet the selected filters.";this.getShowDups()&&(c="No duplicate Tags found.");var d=Ext.create("Rally.data.custom.Store",b);this.down("#gridBox").add({xtype:"rallygrid",store:d,columnCfgs:this._getColumnCfgs(),showPagingToolbar:!1,enableBulkEdit:!0,enableEditing:!1,viewConfig:{emptyText:'<div class="grid-view-empty">'+c+"</div>"},bulkEditConfig:{items:[{xtype:"tagmanagementbulkarchive"},{xtype:"tagmanagementbulkdelete"}]},showRowActionsColumn:!1,showPagingToolbar:!1})}},_getColumnCfgs:function(){var a=[{xtype:"rallyrowactioncolumn",rowActionsFn:function(a){return[{xtype:"tagreplacemenuitem",record:a}]}},{dataIndex:"Name",text:"Name"}];return this.getShowArchived()&&a.push({dataIndex:"Archived",text:"Archived"}),this.getShowHistory()&&a.push({dataIndex:"lastUsed",text:"Last Used"}),a.push({dataIndex:"count",text:"Uses",renderer:function(a){return a||"--"}}),a.push({dataIndex:"CreationDate",text:"Date Created"}),a},_initializeApp:function(a){this.logger.log("_updateView",a),this.removeAll();var b=this.add({xtype:"container",itemId:"selectorBox",layout:"hbox"});this.add({xtype:"container",itemId:"gridBox"});this._addToggleButton("btDuplicates","icon-copy","Show Duplicate Tags",this._toggleButton),this._addToggleButton("btHistory","icon-history","Show Last Used Date",this._fetchHistory),this._addToggleButton("btArchived","icon-archive","Show Archived Tags",this._toggleButton),this._addToggleButton("btUnused","icon-none","Show Unused Tags",this._toggleButton);var c=b.add({xtype:"rallynumberfield",fieldLabel:"Usage Less Than",labelAlign:"right",itemId:"usedFewerThan",margin:5,labelWidth:150,width:200,minValue:1,maxValue:1e3});c.on("change",this._updateView,this),b.add({xtype:"rallynumberfield",fieldLabel:"Months Since Last Usage",labelAlign:"right",itemId:"monthsSinceUsed",margin:5,labelWidth:150,width:200,minValue:0,maxValue:120}),c.on("change",this._updateView,this),this._toggleButton(null,null,!0),this.getUseLookback()?(this.setLoading("Loading Tag Usage Data from the Lookback API"),this.logger.log("_fetchCurrentTagDataFromLookback BEGIN"),this._fetchCurrentTagDataFromLookback().then({success:function(a){this.logger.log("snapshot count",a.length),this.tagMetrics.addCurrentSnapshots(a)},failure:this._showErrorNotification,scope:this}).always(function(){this.logger.log("_fetchCurrentTagDataFromLookback END"),this.setLoading(!1)},this)):(this.setLoading("Loading Tag Usage Data from WSAPI"),this.logger.log("_fetchCurrentTagDataFromWsapi BEGIN"),this._fetchCurrentTagDataFromWsapi().then({success:function(a){var b=_.flatten(a);this.logger.log("record count",b.length),this.tagMetrics.addCurrentWsapiRecords(b)},failure:this._showErrorNotification,scope:this}).always(function(){this.logger.log("_fetchCurrentTagDataFromWsapi END"),this.setLoading(!1)},this))},_addToggleButton:function(a,b,c,d){var e=this.down("#selectorBox").add({xtype:"rallybutton",iconCls:b,cls:"secondary rly-small",enableToggle:!0,itemId:a,toolTipText:c,margin:5});e.on("toggle",d,this)},_buildTagMetrics:function(a){this.tagMetrics=Ext.create("CATS.tag-management.utils.TagMetrics",{tags:a,listeners:{ready:this._initializeApp,update:this._updateView,scope:this}})},getShowHistory:function(){return this.down("#btHistory").pressed},getShowDups:function(){return this.down("#btDuplicates").pressed},getMonthsSinceUsed:function(){return this.down("#monthsSinceUsed").getValue()||0},getUsageLessThan:function(){return this.down("#usedFewerThan").getValue()||0},getShowArchived:function(){return this.down("#btArchived").pressed},getShowUnused:function(){return this.down("#btUnused").pressed},getUseLookback:function(){return"true"===this.getSetting("useLookback")||this.getSetting("useLookback")===!0?!0:!1},_fetchHistory:function(a,b){this.logger.log("_fetchHistory",b),b?(this.setLoading("Loading Historical Tag Data..."),this._toggleButton(a,b,!0),this._fetchHistoricalTagData().then({success:function(a){this.tagMetrics.addHistoricalSnapshots(a)},failure:this._showErrorNotification,scope:this}).always(function(){this.setLoading(!1)},this)):this._toggleButton(a,b)},_toggleButton:function(a,b,c){a&&(b?(a.removeCls("secondary"),a.addCls("primary")):(a.removeCls("primary"),a.addCls("secondary"))),this.getShowDups()?(this.down("#monthsSinceUsed").hide(),this.down("#usedFewerThan").hide()):(this.down("#usedFewerThan").show(),this.getShowHistory()?this.down("#monthsSinceUsed").show():this.down("#monthsSinceUsed").hide()),c||this._updateView()},_fetchCurrentTagDataFromWsapi:function(){return Deft.Promise.all([this._fetchCurrentTagDataForModelFromWsapi("PortfolioItem"),this._fetchCurrentTagDataForModelFromWsapi("HierarchicalRequirement"),this._fetchCurrentTagDataForModelFromWsapi("Defect"),this._fetchCurrentTagDataForModelFromWsapi("TestSet"),this._fetchCurrentTagDataForModelFromWsapi("DefectSuite"),this._fetchCurrentTagDataForModelFromWsapi("TestCase")])},_fetchCurrentTagDataForModelFromWsapi:function(a){var b=Ext.create("Deft.Deferred");return Ext.create("Rally.data.wsapi.Store",{model:a,fetch:["Tags","ObjectID","Name","LastUpdateDate"],filters:[{property:"Tags.ObjectID",operator:">",value:0}],pageSize:2e3,context:{project:null},limit:"Infinity"}).load({callback:function(a,c,d){c.wasSuccessful()?b.resolve(a):b.reject(c.error.errors.join(","))}}),b.promise},getTagFilters:function(){var a=this.down("#txtName")&&this.down("#txtName").getValue();return a?[{property:"Name",operator:"contains",value:a}]:[]},getArtifactFilters:function(){var a=this.down("#txtName")&&this.down("#txtName").getValue();return a?[{property:"Tags.Name",operator:"contains",value:a}]:[]},_fetchTags:function(){var a=Ext.create("Deft.Deferred");return Ext.create("Rally.data.wsapi.Store",{model:"Tag",fetch:["ObjectID","Name","Archived","CreationDate"],pageSize:2e3,filters:this.getTagFilters(),limit:"Infinity"}).load({callback:function(b,c,d){c.wasSuccessful()?a.resolve(b):(console.log("operation",c.error),a.reject(c.error.errors.join(",")))}}),a.promise},_fetchHistoricalTagData:function(){var a=Ext.create("Deft.Deferred");return Ext.create("Rally.data.lookback.SnapshotStore",{fetch:["Tags","_ValidFrom","_ValidTo","_PreviousValues.Tags"],find:{Tags:{$exists:!0},"_PreviousValues.Tags":{$exists:!0}},removeUnauthorizedSnapshots:!0,limit:"Infinity"}).load({callback:function(b,c,d){c.wasSuccessful()?a.resolve(b):a.reject(c.error.errors.join(","))}}),a.promise},_fetchCurrentTagDataFromLookback:function(){var a=Ext.create("Deft.Deferred");return Ext.create("Rally.data.lookback.SnapshotStore",{fetch:["Tags","_ValidFrom","_ValidTo","_TypeHierarchy"],find:{Tags:{$exists:!0},__At:"current"},removeUnauthorizedSnapshots:!0,limit:"Infinity"}).load({callback:function(b,c,d){c.wasSuccessful()?a.resolve(b):(console.log("operation",c.error),a.reject(c.error.errors.join(",")))}}),a.promise},getOptions:function(){return[{text:"About...",handler:this._launchInfo,scope:this}]},getSettingsFields:function(){return[{name:"useLookback",xtype:"rallycheckboxfield",fieldLabel:"Enable Lookback Usage",labelAlign:"right"}]},_launchInfo:function(){this.about_dialog&&this.about_dialog.destroy(),this.about_dialog=Ext.create("Rally.technicalservices.InfoLink",{})},isExternal:function(){return"undefined"==typeof this.getAppId()}});

               Rally.launchApp('tag-management', {
                   name: 'Tag Management'
               });
        });
    </script>

    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>